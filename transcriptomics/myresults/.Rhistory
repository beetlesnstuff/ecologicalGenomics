names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet7$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
module.gene.mapping <- as.data.frame(bwnet$colors) # assigns module membership to each gene
# get number of genes for each module
table(bwnet7$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet7$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(bwnet22)
View(bwnet7)
View(bwnet22)
View(bwnet8)
View(bwnet9)
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet22$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet$colors)
# get number of genes for each module
table(bwnet22$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet22$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[4:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[1:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
bwnet20 <- readRDS("bwnet20.rds")
# convert matrix to numeric
norm.counts[] <- sapply(norm.counts, as.numeric)
soft_power <- 6
temp_cor <- cor
cor <- WGCNA::cor # use the 'cor' function from the WGCNA package
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet22$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet22$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet22$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet7$MEs
head(module_eigengenes)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[13:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(bwnet7)
View(bwnet)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:17],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:29],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:18],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:19],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:17],
y = names(heatmap.data)[1:17],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(module_eigengenes)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[18:23],
y = names(heatmap.data)[1:17],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[18:22],
y = names(heatmap.data)[1:17],
col = c("blue1", "skyblue", "white", "pink", "red"))
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet8$MEs
View(bwnet8)
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet8$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet7$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet22$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[16:20],
y = names(heatmap.data)[1:1715],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[16:20],
y = names(heatmap.data)[1:15],
col = c("blue1", "skyblue", "white", "pink", "red"))
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet9$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet7$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet22$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
View(bwnet9)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:18],
y = names(heatmap.data)[1:13],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(bwnet20)
View(bwnet22)
View(bwnet22)
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet22$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet22$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet22$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[5:9],
y = names(heatmap.data)[1:4],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes <- bwnet9$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet9$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet9$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[5:9],
y = names(heatmap.data)[1:4],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(bwnet9)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[14:19],
y = names(heatmap.data)[1:13],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[14:18],
y = names(heatmap.data)[1:13],
col = c("blue1", "skyblue", "white", "pink", "red"))
module.gene.mapping <- as.data.frame(bwnet$colors) # assigns module membership to each gene
module.gene.mapping %>%
filter(`bwnet$colors` == 'yellow') %>%
rownames()
groups <- sample_metadata[,c(3,1)]
module_eigengene.metadata <- merge(groups, heatmap.data, by = 'row.names')
#Create a summary data frame of a particular module eigengene information
MEyellow_summary <- summarySE(module_eigengene.metadata, measurevar="MEyellow", groupvars=c("Generation","treatment"))
#Plot a line interaction plot of a particular module eigengene
ggplot(MEyellow_summary, aes(x=as.factor(Generation), y=MEyellow, color=treatment, fill = treatment, shape = treatment)) +
geom_point(size=5, stroke = 1.5 ) +
geom_errorbar(aes(ymin=MEyellow-se, ymax=MEyellow+se), width=.15) +
geom_line(aes(color=treatment, group=treatment, linetype = treatment)) +
scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A", "#CC3333"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
xlab("Generation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(panel.grid.minor.y = element_blank(), legend.position = "none", plot.margin = margin(0,6,0,6))
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[14:18],
y = names(heatmap.data)[1:13],
col = c("blue1", "skyblue", "white", "pink", "red"))
d <-plotCounts(dds, gene="TRINITY_DN11845_c0_g1::TRINITY_DN11845_c0_g1_i9::g.36434::m.36434", intgroup = (c("treatment","Generation")), returnData=TRUE)
d_summary <- summarySE(d, measurevar = "count", groupvars=c("Generation","treatment"))
ggplot(d_summary, aes(x=as.factor(Generation), y=count, color=treatment, fill = treatment, shape = treatment)) +
geom_point(size=5, stroke = 1.5 ) +
geom_errorbar(aes(ymin=count-se, ymax=count+se), width=.15) +
geom_line(aes(color=treatment, group=treatment, linetype = treatment)) +
scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A", "#CC3333"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
xlab("Generation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(panel.grid.minor.y = element_blank(), legend.position = "none", plot.margin = margin(0,6,0,6))
module.membership.measure <- cor(module_eigengenes, norm.counts, use = 'p')
module.membership.measure.pvals <- corPvalueStudent(module.membership.measure, nSamples)
module.membership.measure.pvals[1:10,1:10]
# Make a heat map of gene expressions within modules.
# Use the norm.counts matrix, subset based on module membership
t_norm.counts <- norm.counts %>% t() %>% as.data.frame()
# purple module
purple_transcripts <- module.gene.mapping %>%
filter(`bwnet$colors` == 'purple') %>%
rownames()
t_norm.counts_purple <- t_norm.counts %>%
filter(row.names(t_norm.counts) %in% purple_transcripts)
t_norm.counts_purple <- t_norm.counts_purple - rowMeans(t_norm.counts_purple)
df <- as.data.frame(colData(dds)[,c("eneration","treatment")])
#blue to purple color scheme
paletteLength <- 50
myColor <- colorRampPalette(c("dodgerblue", "white", "yellow"))(paletteLength)
myBreaks <- c(seq(min(t_norm.counts_purple), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(t_norm.counts_purple)/paletteLength, max(t_norm.counts_purple), length.out=floor(paletteLength/2)))
pheatmap(t_norm.counts_purple, color = myColor, breaks = myBreaks,
show_colnames = FALSE, show_rownames = FALSE, annotation_col = df, main = "purple")
# Make a heat map of gene expressions within modules.
# Use the norm.counts matrix, subset based on module membership
t_norm.counts <- norm.counts %>% t() %>% as.data.frame()
# Yellow module
yellow_transcripts <- module.gene.mapping %>%
filter(`bwnet$colors` == 'yellow') %>%
rownames()
t_norm.counts_yellow <- t_norm.counts %>%
filter(row.names(t_norm.counts) %in% yellow_transcripts)
t_norm.counts_yellow <- t_norm.counts_yellow - rowMeans(t_norm.counts_yellow)
df <- as.data.frame(colData(dds)[,c("eneration","treatment")])
#blue to yellow color scheme
paletteLength <- 50
myColor <- colorRampPalette(c("dodgerblue", "white", "yellow"))(paletteLength)
myBreaks <- c(seq(min(t_norm.counts_yellow), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(t_norm.counts_yellow)/paletteLength, max(t_norm.counts_yellow), length.out=floor(paletteLength/2)))
pheatmap(t_norm.counts_yellow, color = myColor, breaks = myBreaks,
show_colnames = FALSE, show_rownames = FALSE, annotation_col = df, main = "Yellow")
# Try with new counts table from filtered transcriptome assembly
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
#import the sample discription table
conds <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ treatment)
dim(dds)
# Filter
dds <- dds[rowSums(counts(dds) >= 30) >= 28,]
nrow(dds)
# Subset the DESeqDataSet to the specific level of the "generation" factor
dds_F0 <- subset(dds, select = generation == 'F0')
dim(dds_F0)
# Perform DESeq2 analysis on the subset
dds_F0 <- DESeq(dds_F0)
resultsNames(dds_F0)
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
#import the sample discription table
conds <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
# Let's see how many reads we have from each sample
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,21000000))
View(bwnet7)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module_eigengenes <- bwnet7$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet7$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet7$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# 6A. Relate modules to traits --------------------------------------------------
# module trait associations
#do any of these gene expression patters match
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
View(module.membership.measure)
View(module_eigengenes)
View(module_eigengene.metadata)
# get number of genes for each module
table(bwnet7$colors)
table(bwnet7$colors)
table(bwnet9$colors)
table(bwnet22$colors)
